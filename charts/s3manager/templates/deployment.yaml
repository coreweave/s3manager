apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-s3manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}-s3manager
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-s3manager
    spec:
      restartPolicy: Always
      containers:
      - name: s3manager
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /ko-app/s3manager
        ports:
        - containerPort: 80
          name: http
        securityContext:
          runAsUser: 0
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 4
            memory: 8Gi
        env:
        - name: ENDPOINT
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: s3-endpoint
        - name: ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: s3-access-key
        - name: SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: s3-secret-key
        - name: USER
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: app-username
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: app-password
        - name: SESSION_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-s3manager-secrets
              key: app-session-key
        - name: PORT
          value: "80"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: topology.kubernetes.io/region
                operator: In
                values:
                - {{ .Values.nodeSelector.region }}
              - key: node.coreweave.cloud/class
                operator: In
                values:
                - cpu
      tolerations:
      - key: is_cpu_compute
        operator: Exists